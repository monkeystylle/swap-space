// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PostedItemStatus {
  OPEN
  DONE
}

model User {
  id           String       @id @default(cuid())
  username     String       @unique
  email        String       @unique
  passwordHash String   
  googleId     String?      @unique // Add this for Google OAuth
  sessions     Session[]
  postedItems  PostedItem[] // Add this relationship
  offers       Offer[]      // Add this relationship
  
  // Messaging relationships
  sentMessages       Message[]                @relation("MessageSender")
  conversationParticipants ConversationParticipant[] @relation("ParticipantUser")
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model PostedItem {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  title       String
  details     String           @db.VarChar(1024)
  status      PostedItemStatus @default(OPEN)
  
  // Cloudinary image info
  imagePublicId String?        // Cloudinary public_id for the image
  imageSecureUrl String?       // Cloudinary secure_url for the image
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  offers      Offer[]

  @@index([userId])
}

model Offer {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  content      String     @db.VarChar(1024)
  
  // Cloudinary image info for offer images
  imagePublicId String?   // Cloudinary public_id for the offer image
  imageSecureUrl String?  // Cloudinary secure_url for the offer image
  
  postedItem   PostedItem @relation(fields: [postedItemId], references: [id], onDelete: Cascade)
  postedItemId String
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?

  @@index([postedItemId])
  @@index([userId])
  @@unique([postedItemId, userId]) // Ensure user can only offer once per posted item
}

// Messaging models
model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id           String   @id @default(cuid())
  joinedAt     DateTime @default(now())
  lastReadAt   DateTime?
  archivedAt   DateTime?
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation("ParticipantUser", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  
  @@unique([conversationId, userId]) // Ensure user can only participate once per conversation
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(2048)
  createdAt DateTime @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

